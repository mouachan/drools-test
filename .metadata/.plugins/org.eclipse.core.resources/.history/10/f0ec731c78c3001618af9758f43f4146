package com.amadeus.drools.rule.parser;

import java.io.InputStreamReader;
import java.util.ArrayList;

import org.apache.log4j.Logger;
import org.drools.compiler.compiler.DrlParser;
import org.drools.compiler.compiler.DroolsParserException;
import org.drools.compiler.lang.descr.AndDescr;
import org.drools.compiler.lang.descr.BaseDescr;
import org.drools.compiler.lang.descr.ExprConstraintDescr;
import org.drools.compiler.lang.descr.PackageDescr;
import org.drools.compiler.lang.descr.PatternDescr;
import org.drools.compiler.lang.descr.RuleDescr;
import org.kie.internal.builder.conf.LanguageLevelOption;

import com.amadeus.drools.rule.model.Constraint;
import com.amadeus.drools.rule.model.Rule;
import com.fasterxml.jackson.core.JsonProcessingException;

public class RuleParser {
	private static Logger logger = Logger.getLogger(RuleParser.class);
	DrlParser dp = new DrlParser(LanguageLevelOption.DRL6);
	protected String filename;
	protected PackageDescr pdesc = null;
	protected Rule rule = new Rule(); 
	public void setUp(String filename){
		this.filename = filename;
		InputStreamReader is = new InputStreamReader(RuleParser.class.getResourceAsStream(filename));
		try {
			pdesc = dp.parse(is);
		} catch (DroolsParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public Rule convertDRLToCustomRuleObject(){
		for (RuleDescr rdesc : pdesc.getRules()) {
			rule.setName(rdesc.getName());
			AndDescr lhs = rdesc.getLhs();
			for (BaseDescr bdescr : lhs.getDescrs()) {
				PatternDescr pdescr = (PatternDescr) bdescr;
				logger.info("Object Type " + pdescr.getObjectType());
				for (BaseDescr slc : pdescr.getSlottedConstraints()) {
					ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
					logger.info(ecdescr.getText());
					String[] constraint = ecdescr.getText().split(" ");
					for (int i = 0; i < constraint.length; i++){
						logger.debug(constraint[i]);
						condition.setO
					}
				}
			}

			// consequence
			logger.info(rdesc.getConsequence());

			for (String keyconsequence : rdesc.getNamedConsequences().keySet())
				logger.info("key : " + keyconsequence);
		}
	
		return rule;
	}
	/**
	 * Simple way to get condition, we use a split to get attribute, comparator and value
	 * @param bdescrs
	 */
	protected void setConditions(ArrayList<BaseDescr> bdescrs){
		for (BaseDescr bdescr : bdescrs) {
			PatternDescr pdescr = (PatternDescr) bdescr;
			logger.debug("Object Type " + pdescr.getObjectType());
			Constraint condition = new Constraint();
			condition.setObjectType(pdescr.getObjectType());
			for (BaseDescr slc : pdescr.getSlottedConstraints()) {
				ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
				logger.debug(ecdescr.getText());
				String[] constraint = ecdescr.getText().split(" ");
					condition.setAttribute(constraint[0]);
					condition.setOperand(constraint[1]);
					condition.setValue(constraint[2]);
			}
			rule.getConstraints().add(condition);
		}	
	}
	
}
