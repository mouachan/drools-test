package com.amadeus.drools.rule.parser;

import java.io.InputStreamReader;
import java.util.ArrayList;

import org.apache.log4j.Logger;
import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;
import org.drools.compiler.compiler.DialectCompiletimeRegistry;
import org.drools.compiler.compiler.DrlParser;
import org.drools.compiler.compiler.DroolsParserException;
import org.drools.compiler.lang.descr.AndDescr;
import org.drools.compiler.lang.descr.BaseDescr;
import org.drools.compiler.lang.descr.ExprConstraintDescr;
import org.drools.compiler.lang.descr.PackageDescr;
import org.drools.compiler.lang.descr.PatternDescr;
import org.drools.compiler.lang.descr.RuleDescr;
import org.drools.compiler.rule.builder.PatternBuilder;
import org.drools.compiler.rule.builder.RuleBuildContext;
import org.drools.compiler.rule.builder.dialect.mvel.MVELDialect;
import org.drools.core.definitions.InternalKnowledgePackage;
import org.kie.internal.builder.conf.LanguageLevelOption;

import com.amadeus.drools.rule.model.Constraint;
import com.amadeus.drools.rule.model.Rule;
import com.fasterxml.jackson.core.JsonProcessingException;

public class RuleParser {
	private static Logger logger = Logger.getLogger(RuleParser.class);
	DrlParser dp = new DrlParser(LanguageLevelOption.DRL6);
	protected String filename;
	protected PackageDescr pdesc = null;
	protected Rule rule = new Rule();
	final RuleBuildContext context=null;

	public void setUp(String filename) {
		this.filename = filename;
		InputStreamReader is = new InputStreamReader(RuleParser.class.getResourceAsStream(filename));
		try {
			pdesc = dp.parse(is);
		} catch (DroolsParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Rule buildRuleFromDrl() {
		for (RuleDescr rdesc : pdesc.getRules()) {
			KnowledgeBuilderImpl pkgBuilder = new KnowledgeBuilderImpl();
			pkgBuilder.addPackage(pdesc);
			InternalKnowledgePackage pkg = pkgBuilder.getPackageRegistry(pdesc.getName()).getPackage();
			DialectCompiletimeRegistry dialectRegistry = pkgBuilder.getPackageRegistry(pdesc.getName())
					.getDialectCompiletimeRegistry();
			MVELDialect mvelDialect = (MVELDialect) dialectRegistry.getDialect("mvel");
			context = new RuleBuildContext(pkgBuilder, rdesc, dialectRegistry, pkg, mvelDialect);

			rule.setName(rdesc.getName());
			AndDescr lhs = rdesc.getLhs();
			for (BaseDescr bdescr : lhs.getDescrs()) {
				PatternDescr pdescr = (PatternDescr) bdescr;
				logger.info("Object Type " + pdescr.getObjectType());
				for (BaseDescr slc : pdescr.getSlottedConstraints()) {
					ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
					logger.info(ecdescr.getText());
					String[] constraint = ecdescr.getText().split(" ");
					for (int i = 0; i < constraint.length; i++) {
						logger.debug(constraint[i]);
					}
				}
			}

			// consequence
			logger.info(rdesc.getConsequence());

			for (String keyconsequence : rdesc.getNamedConsequences().keySet())
				logger.info("key : " + keyconsequence);
		}

		return rule;
	}

	/**
	 * Simple way to get condition, we use a split to get attribute, comparator
	 * and value
	 * 
	 * @param bdescrs
	 */
	protected void buildConditionsBasedOnString(ArrayList<BaseDescr> bdescrs) {
		for (BaseDescr bdescr : bdescrs) {
			PatternDescr pdescr = (PatternDescr) bdescr;
			logger.debug("Object Type " + pdescr.getObjectType());
			Constraint condition = new Constraint();
			condition.setObjectType(pdescr.getObjectType());
			for (BaseDescr slc : pdescr.getSlottedConstraints()) {
				ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
				logger.debug(ecdescr.getText());
				String[] constraint = ecdescr.getText().split(" ");
				condition.setAttribute(constraint[0]);
				condition.setOperand(constraint[1]);
				condition.setValue(constraint[2]);
			}
			rule.getConstraints().add(condition);
		}
	}

	public void testSimpleExpression() throws Exception {
		PackageDescr pkgDescr = new PackageDescr("pkg1");
		KnowledgeBuilderImpl pkgBuilder = new KnowledgeBuilderImpl();
		pkgBuilder.addPackage(pkgDescr);
		InternalKnowledgePackage pkg = pkgBuilder.getPackageRegistry("pkg1").getPackage();
		final RuleDescr ruleDescr = new RuleDescr("rule 1");
		ruleDescr.setNamespace("pkg1");
		ruleDescr.setConsequence("modify (cheese) {price = 5 };\nretract (cheese)");
		DialectCompiletimeRegistry dialectRegistry = pkgBuilder.getPackageRegistry(pkg.getName())
				.getDialectCompiletimeRegistry();
		MVELDialect mvelDialect = (MVELDialect) dialectRegistry.getDialect("mvel");
		final RuleBuildContext context = new RuleBuildContext(pkgBuilder, ruleDescr, dialectRegistry, pkg, mvelDialect);
		final InstrumentedDeclarationScopeResolver declarationResolver = new InstrumentedDeclarationScopeResolver();
		final ObjectType cheeseObjeectType = new ClassObjectType(Cheese.class);
		final Pattern pattern = new Pattern(0, cheeseObjeectType, "cheese");
		final GroupElement subrule = new GroupElement(GroupElement.AND);
		subrule.addChild(pattern);
		final Map<String, Declaration> map = new HashMap<String, Declaration>();
		map.put("cheese", pattern.getDeclaration());
		declarationResolver.setDeclarations(map);
		context.setDeclarationResolver(declarationResolver);
		final MVELConsequenceBuilder builder = new MVELConsequenceBuilder();
		builder.build(context, RuleImpl.DEFAULT_CONSEQUENCE_NAME);
		InternalKnowledgeBase kBase = (InternalKnowledgeBase) KnowledgeBaseFactory.newKnowledgeBase();
		PropagationContextFactory pctxFactory = kBase.getConfiguration().getComponentFactory()
				.getPropagationContextFactory();
		kBase.addPackage(pkg);
		StatefulKnowledgeSessionImpl ksession = (StatefulKnowledgeSessionImpl) kBase.newStatefulKnowledgeSession();
		final Cheese cheddar = new Cheese("cheddar", 10);
		final InternalFactHandle f0 = (InternalFactHandle) ksession.insert(cheddar);
		final LeftTupleImpl tuple = new LeftTupleImpl(f0, null, true);
		f0.removeLeftTuple(tuple);
		final AgendaItem item = new AgendaItemImpl(0, tuple, 10,
				pctxFactory.createPropagationContext(1, 1, null, tuple, null),
				new RuleTerminalNode(0, new CompositeObjectSinkAdapterTest.MockBetaNode(), context.getRule(), subrule,
						0, new BuildContext(kBase, null)),
				null);
		final DefaultKnowledgeHelper kbHelper = new DefaultKnowledgeHelper(ksession);
		kbHelper.setActivation(item);
		((MVELConsequence) context.getRule().getConsequence()).compile((MVELDialectRuntimeData) pkgBuilder
				.getPackageRegistry(pkg.getName()).getDialectRuntimeRegistry().getDialectData("mvel"));
		context.getRule().getConsequence().evaluate(kbHelper, ksession);
		assertEquals(5, cheddar.getPrice());
	}

	protected void buildConditions(ArrayList<BaseDescr> bdescrs){
		for (BaseDescr bdescr : bdescrs) {
			PatternDescr pdescr = (PatternDescr) bdescr;
			PatternBuilder patternBuilder = new PatternBuilder();
	
			patternBuilder.build(context, descr)
			logger.debug("Object Type " + pdescr.getObjectType());
			
			
			Constraint condition = new Constraint();
			condition.setObjectType(pdescr.getObjectType());
			for (BaseDescr slc : pdescr.getSlottedConstraints()) {
				ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
				logger.debug(ecdescr.getText());
				String[] constraint = ecdescr.getText().split(" ");
					condition.setAttribute(constraint[0]);
					condition.setOperand(constraint[1]);
					condition.setValue(constraint[2]);
			}
			rule.getConstraints().add(condition);
		}	
	}

}
