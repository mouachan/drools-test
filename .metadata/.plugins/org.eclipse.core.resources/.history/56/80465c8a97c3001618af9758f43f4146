package com.amadeus.drools.rule.parser;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.drools.compiler.compiler.DrlParser;
import org.drools.compiler.compiler.DroolsParserException;
import org.drools.compiler.lang.descr.AndDescr;
import org.drools.compiler.lang.descr.AttributeDescr;
import org.drools.compiler.lang.descr.BaseDescr;
import org.drools.compiler.lang.descr.EvalDescr;
import org.drools.compiler.lang.descr.ExprConstraintDescr;
import org.drools.compiler.lang.descr.OrDescr;
import org.drools.compiler.lang.descr.PackageDescr;
import org.drools.compiler.lang.descr.PatternDescr;
import org.drools.compiler.lang.descr.RuleDescr;
import org.kie.api.KieServices;
import org.kie.api.io.KieResources;
import org.kie.api.io.Resource;
import org.kie.internal.builder.conf.LanguageLevelOption;

import com.amadeus.drools.rule.model.Rule;

public class RuleParser {
	private static Logger logger = Logger.getLogger(RuleParser.class);
	private DrlParser dp = new DrlParser(LanguageLevelOption.DRL6);
	protected String filename;
	protected PackageDescr packageDescr = null;
	protected Rule rule = new Rule();
	private static final java.util.regex.Pattern evalRegexp = java.util.regex.Pattern.compile("^eval\\s*\\(",
			java.util.regex.Pattern.MULTILINE);

	private static final java.util.regex.Pattern identifierRegexp = java.util.regex.Pattern
			.compile("([\\p{L}_$][\\p{L}\\p{N}_$]*)");

	private static final java.util.regex.Pattern getterRegexp = java.util.regex.Pattern
			.compile("get([\\p{L}_][\\p{L}\\p{N}_]*)\\(\\s*\\)");

	public void setUp(String filepath) {
		KieServices kieServices = KieServices.Factory.get();
		KieResources kieResources = kieServices.getResources();
		Resource resource = kieResources.newFileSystemResource(filepath);

		DrlParser parser = new DrlParser();
		try {
			packageDescr = parser.parse(resource);
		} catch (DroolsParserException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void parseDrlRule() {
		List<RuleDescr> rules = packageDescr.getRules();
		for (RuleDescr rule : rules) {
			if (rule.isRule()) {
				logger.info(rule.getName());
				logger.info("Salience : " + rule.getSalience());
				logger.info("Dialect : " + rule.getDialect());

				// get all rule attributes
				for (String key : rule.getAttributes().keySet()) {
					AttributeDescr attribute = (AttributeDescr) rule.getAttributes().get(key);
					logger.info(attribute.getName() + " " + attribute.getValue());

				}
				// get all conditions
				if (rule.getLhs() instanceof AndDescr) {
					for (BaseDescr desc : rule.getLhs().getDescrs()) {
						// Eval conditions
						if (desc instanceof EvalDescr) {
							EvalDescr evaldescr = (EvalDescr) desc;
							logger.info(evaldescr.getContent().toString());
						} // AND conditions
						else if (desc instanceof PatternDescr) {
							PatternDescr pdescr = (PatternDescr) desc;
							logger.info("id = " + pdescr.getIdentifier() + ", ObjectType = " + pdescr.getObjectType());
							for (BaseDescr slc : pdescr.getSlottedConstraints()) {
								ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
								logger.info(ecdescr.getType().name() + " Constraint = " + ecdescr);
							}
						}
						// Or conditions
						else if (desc instanceof OrDescr) {
							OrDescr ordescr = (OrDescr) desc;
							for (BaseDescr d : ordescr.getDescrs()) {
								PatternDescr pdescr = (PatternDescr) d;
								logger.info(
										"id = " + pdescr.getIdentifier() + ", ObjectType = " + pdescr.getObjectType());
								for (BaseDescr slc : pdescr.getSlottedConstraints()) {
									ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
									logger.info(ecdescr.getType().name() + " Constraint = " + ecdescr);
								}
							}
						}
					}
				}
				// get all consequences
				logger.info(rule.getConsequence());
				logger.info(rule.getConsequenceLine());
				logger.info(rule.getConsequenceOffset());
				logger.info(rule.getConsequencePattern());
				for (Map.Entry<String, Object> namedConsequence : rule.getNamedConsequences().entrySet())
					logger.info(namedConsequence.getKey() + " : " + namedConsequence.getValue());

			}
		}
	}

}
