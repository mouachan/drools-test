package com.amadeus.droolsfeature;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.drools.compiler.compiler.DroolsParserException;
import org.drools.core.common.InternalAgenda;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.kie.api.KieBase;
import org.kie.api.KieServices;
import org.kie.api.builder.KieBuilder;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.definition.type.FactType;
import org.kie.api.io.Resource;
import org.kie.api.io.ResourceType;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.internal.builder.DecisionTableConfiguration;
import org.kie.internal.builder.DecisionTableInputType;
import org.kie.internal.builder.KnowledgeBuilder;
import org.kie.internal.builder.KnowledgeBuilderFactory;

import com.amadeus.droolsfeature.listener.RulesAgendaListener;
import com.amadeus.droolsfeature.model.BzrFlightMatchDeclare;

public class RulesUnitTest {
	private String path = null;
	protected RulesAgendaListener agendaEventListener = null;
	private static Logger logger = Logger.getLogger(RulesUnitTest.class);
	KieBase kBase = null;
	KieSession kSession = null;

	public void init(String fileName) {
		path = System.getProperty("user.dir") + "/src/main/resources/com/droolsfeature/rules/";
		KieServices kieServices = KieServices.Factory.get();
		// Create File System services
		KieFileSystem kFileSystem = kieServices.newKieFileSystem();
		Resource resource = null;
		File file = new File(path + fileName);
		logger.info(path+fileName);
		if (fileName.substring(fileName.indexOf('.') + 1, fileName.length()).equals("drl"))
			resource = kieServices.getResources().newFileSystemResource(file).setResourceType(ResourceType.DRL);
		else
			resource = kieServices.getResources().newFileSystemResource(file).setResourceType(ResourceType.DTABLE);
		kFileSystem.write(resource);

		KieBuilder kbuilder = kieServices.newKieBuilder(kFileSystem);
		kbuilder.buildAll();
		if (kbuilder.getResults().hasMessages(org.kie.api.builder.Message.Level.ERROR)) {
			logger.error(kbuilder.getResults().getMessages());
			throw new RuntimeException("Build time Errors: " + kbuilder.getResults().toString());
		}
		KieContainer kContainer = kieServices.newKieContainer(kieServices.getRepository().getDefaultReleaseId());
		kSession = kContainer.newKieSession("ksession-rules");
		kBase = kSession.getKieBase();
	}

	public Object createFlight(String name) {
		// get the declared FactType
		FactType flightType = kBase.getFactType("com.amadeus.droolsfeature.rules", "Flight");

		// handle the type as necessary:
		// create instances:
		Object flight = null;
		try {
			flight = flightType.newInstance();
			// set attributes values
			// flightType.set(flight, "name", name);

		} catch (InstantiationException e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return flight;

	}

	public Object createCustomer(String name) {
		// get the declared FactType
		FactType customerType = kBase.getFactType("com.amadeus.droolsfeature.rules", "Customer");

		// handle the type as necessary:
		// create instances:
		Object customer = null;
		try {
			customer = customerType.newInstance();
			// set attributes values
			customerType.set(customer, "name", name);

		} catch (InstantiationException e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return customer;

	}

	public Object createFact(String pkgName, String factTypeName, HashMap<String, Object> attributes) {
		Object fact = null;
		FactType factType = kBase.getFactType(pkgName, factTypeName);
		try {
			fact = factType.newInstance();
			for (String attributeName : attributes.keySet()) {
				factType.set(fact, attributeName, attributes.get(attributeName));
			}
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		return fact;
	}
	
	public Object getAttribute(Object fact,String pkgName, String factTypeName){
		FactType factType = kBase.getFactType(pkgName, factTypeName);
		Object attribute = factType.get(fact, "flight");
		return attribute;
	}

	public void runRule(List<Object> objects) {
		agendaEventListener = new RulesAgendaListener();
		kSession.addEventListener(agendaEventListener);
		for (Object object : objects)
			kSession.insert(object);
		kSession.fireAllRules();
		kSession.dispose();
	}

	public void runRule(String fileName, String ruleFlowGroup, Object object) {
		KieServices kieServices = KieServices.Factory.get();
		// Create File System services
		KieFileSystem kFileSystem = kieServices.newKieFileSystem();
		Resource resource = null;
		File file = new File(path + fileName);
		if (fileName.substring(fileName.indexOf('.') + 1, fileName.length()).equals("drl"))
			resource = kieServices.getResources().newFileSystemResource(file).setResourceType(ResourceType.DRL);
		else
			resource = kieServices.getResources().newFileSystemResource(file).setResourceType(ResourceType.DTABLE);
		kFileSystem.write(resource);

		KieBuilder kbuilder = kieServices.newKieBuilder(kFileSystem);
		kbuilder.buildAll();
		if (kbuilder.getResults().hasMessages(org.kie.api.builder.Message.Level.ERROR)) {
			throw new RuntimeException("Build time Errors: " + kbuilder.getResults().toString());
		}
		KieContainer kContainer = kieServices.newKieContainer(kieServices.getRepository().getDefaultReleaseId());
		KieSession kSession = kContainer.newKieSession();
		RulesAgendaListener agendaEventListener = new RulesAgendaListener();
		kSession.addEventListener(agendaEventListener);
		kSession.insert(object);
		// ((InternalAgenda)
		// kSession.getAgenda()).activateRuleFlowGroup(ruleFlowGroup);
		kSession.fireAllRules();
		kSession.dispose();
	}

	public void runDt() {
		path = System.getProperty("user.dir") + "/src/main/resources/com/amadeus/dtables/";
		DecisionTableConfiguration dtableconfiguration = KnowledgeBuilderFactory.newDecisionTableConfiguration();
		dtableconfiguration.setInputType(DecisionTableInputType.XLS);
		KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

		kbuilder.add(org.kie.internal.io.ResourceFactory.newClassPathResource(path + "ruleTemplate.xls", getClass()),
				ResourceType.DTABLE, dtableconfiguration);
	}
	@Ignore
	@Test
	public void testGetObjectWithoutModify() {
		init("match.drl");
		ArrayList<Object> objects = new ArrayList<Object>();

		objects.add(createFlight("AS"));
		objects.add(createCustomer("Dupont"));
		runRule(objects);
	}
	@Ignore
	@Test
	public void testAgendaListener() {
		init("match.drl");
		ArrayList<Object> objects = new ArrayList<Object>();

		objects.add(createFlight("AF"));
		objects.add(createCustomer("Dupont"));
		objects.add(createCustomer("Charles"));
		runRule(objects);
	}
	@Ignore
	@Test
	public void testDrlToExcel() {
		DecisionTableTools dtt = new DecisionTableTools();
		try {
			dtt.generateXLSDTFromDRL();
		} catch (ClassNotFoundException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DroolsParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	@Ignore
	@Test
	public void testDrlToXML() {
		DecisionTableTools dtt = new DecisionTableTools();
		try {
			dtt.generateXMLFromDRL();
		} catch (ClassNotFoundException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DroolsParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Test
	public void testAvoidUpdate() {
		//object to insert to the WM
		ArrayList<Object> objects = new ArrayList<Object>();
		//load rules 
		init("groupF.drl");
		//attributes 
		HashMap<String, Object>attributes= new HashMap<String, Object>();
		// set attributes of BzrFlightDeclare
		attributes.put("airline", "1A");
		attributes.put("lom", "5");
		attributes.put("matchList", new ArrayList<Object>());
		Object flight = createFact("com.amadeus.droolsfeature.rules", "BzrFlightDeclare", attributes);
		// clear map of attributes
		attributes.clear();
		//set attributes of Booking
		attributes.put("customer", "Bob");
		attributes.put("lom", "5");
		attributes.put("flight",flight);
		Object booking = createFact("com.amadeus.droolsfeature.rules", "Booking", attributes);
		objects.add(booking);
//		objects.add(getAttribute(booking, "com.amadeus.droolsfeature.rules", "flight"));
		runRule(objects);
		kSession.dispose();
	}
}
