package com.amadeus.drools.rule.parser;

import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.log4j.Logger;
import org.drools.compiler.compiler.DrlParser;
import org.drools.compiler.compiler.DroolsParserException;
import org.drools.compiler.compiler.xml.XmlDumper;
import org.drools.compiler.lang.DrlDumper;
import org.drools.compiler.lang.descr.AndDescr;
import org.drools.compiler.lang.descr.BaseDescr;
import org.drools.compiler.lang.descr.ExprConstraintDescr;
import org.drools.compiler.lang.descr.PackageDescr;
import org.drools.compiler.lang.descr.PatternDescr;
import org.drools.compiler.lang.descr.RuleDescr;
import org.kie.internal.builder.conf.LanguageLevelOption;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class RuleParser {
	private static Logger logger = Logger.getLogger(RuleParser.class);

	private void parse(){
	DrlParser dp = new DrlParser(LanguageLevelOption.DRL6);

	try
	{
		InputStreamReader is = new InputStreamReader(RuleParser.class.getResourceAsStream("rules2.drl"));
		PackageDescr pdesc = dp.parse(is);

		ObjectMapper mapper = new ObjectMapper();

		// Object to JSON in String
		String jsonInString = mapper.writeValueAsString(pdesc);
		logger.info(jsonInString);

		// PackageDescr pdesc2= (PackageDescr)mapper.readValue(jsonInString,
		// PackageDescr.class);
		// assertEquals(pdesc,pdesc2);

		logger.info(pdesc.getName());
		for (RuleDescr rdesc : pdesc.getRules()) {
			AndDescr lhs = rdesc.getLhs();
			for (BaseDescr bdescr : lhs.getDescrs()) {
				PatternDescr pdescr = (PatternDescr) bdescr;
				logger.info("Object Type " + pdescr.getObjectType());
				for (BaseDescr slc : pdescr.getSlottedConstraints()) {
					ExprConstraintDescr ecdescr = (ExprConstraintDescr) slc;
					logger.info(ecdescr.getText());
					String[] constraint = ecdescr.getText().split(" ");
					for (int i = 0; i < constraint.length; i++)
						logger.info(constraint[i]);
				}
			}

			// consequence
			logger.info(rdesc.getConsequence());

			for (String keyconsequence : rdesc.getNamedConsequences().keySet())
				logger.info("key : " + keyconsequence);
		}
		final XmlDumper dumper = new XmlDumper();
		DrlDumper drldump = new DrlDumper();
		// logger.info(dumper.dump(pdesc));

	}catch(
	DroolsParserException e)
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}catch(
	JsonProcessingException e)
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}catch(
	IOException e)
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}}
